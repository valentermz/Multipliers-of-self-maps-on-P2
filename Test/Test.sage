#! /usr/bin/env sage

import sys


class Sample:

    """Instances of this class are 'samples' to be submitted to the Test"""

    def __init__(self, Input, td_format):
        """Initialize by providing a list of 14 rational numbers"""
        self.Input = Input
        self.td_format = td_format
        self.u = [None for _ in range(7)]
        self.v = [None for _ in range(7)]
        self.t = [None for _ in range(4)]
        self.d = [None for _ in range(4)]

    # Construct the variables u,v,t,d from Input

    def build_vars(self):
        Input = self.Input
        if self.td_format is False:
            for i in range(7):
                self.u[i] = Input[2 * i]
                self.v[i] = Input[2 * i + 1]
            for i in range(4):
                self.t[i] = Input[2 * i] + Input[2 * i + 1]
                self.d[i] = Input[2 * i] * Input[2 * i + 1]
        else:
            for i in range(4, 7):
                self.u[i] = Input[2 * i]
                self.v[i] = Input[2 * i + 1]
            for i in range(4):
                self.t[i] = Input[2 * i]
                self.d[i] = Input[2 * i + 1]

    # Construct the ideal of relations

    def build_I(self):
    """Use all the equations available to build an ideal of R"""

        u_4, u_5, u_6 = self.u[4:]
        v_4, v_5, v_6 = self.v[4:]
        t_0, t_1, t_2, t_3 = self.t
        d_0, d_1, d_2, d_3 = self.d

        # Formulas for t,d in terms of coefficients c_i
        Formulas_td = [0 for i in range(8)]
        Formulas_td[0] = t_0-(-c_0-c_5)
        Formulas_td[1] = t_1*(-1-a)+c_0+c_4-c_5
        Formulas_td[2] = t_2*(-1-b)+c_1-c_0+c_5
        Formulas_td[3] = t_3*(-c_3^2*c_2^2-c_0^2*c_5^2+2*c_3*c_0*c_2*c_5+c_1*c_4*c_3*c_2+b*c_1*c_2*c_3^2+b*c_0^2*c_4*c_5 +c_1*c_0*c_4*c_5-b*c_3^2*c_2^2-c_1^2*c_3*c_5-b*c_0^2*c_5^2-c_2*c_0*c_4^2-a*c_0^2*c_5^2-a*c_3^2*c_2^2-b*c_0*c_3*c_1*c_5+2*b*c_3*c_0*c_2*c_5-b*c_0*c_4*c_3*c_2-a*c_0*c_5*c_2*c_4+2*a*c_3*c_0*c_2*c_5-a*c_3*c_1*c_5*c_2+a*c_0*c_5^2*c_1+a*c_3*c_2^2*c_4)+c_0^3*c_5^2+2*c_0^2*c_5*c_2*c_4-2*c_3*c_0^2*c_2*c_5-2*c_0*c_3*c_2^2*c_4+2*c_0*c_3*c_1*c_5^2-2*c_5*c_1*c_2*c_3^2-2*c_3*c_0*c_2*c_5^2+2*c_1*c_0*c_4*c_3*c_2-c_4*c_0^2*c_5^2-c_3*c_2^2*c_4^2+c_4*c_3^2*c_2^2+c_5*c_3^2*c_2^2-c_1^2*c_3*c_5^2-c_0^2*c_5^2*c_1+c_0*c_3^2*c_2^2+c_1*c_3^2*c_2^2-c_1^2*c_2*c_3^2-c_2*c_0^2*c_4^2+c_0^2*c_5^3+2*c_4*c_3*c_1*c_5*c_2
        Formulas_td[4] = d_0-(c_0*c_5-c_2*c_3)
        Formulas_td[5] = d_1*(-1-2*a-a^2)+c_0*c_4-c_0*c_5-c_3*c_1+c_2*c_3
        Formulas_td[6] = d_2*(-1-2*b-b^2)+c_5*c_1-c_0*c_5-c_2*c_4+c_2*c_3
        Formulas_td[7] = d_3*(-2*c_0^2*c_5^3*c_1^2*c_3-2*c_0^3*c_5^2*c_2*c_4^2-6*c_0^2*c_5^2*c_3^2*c_2^2+2*c_0^3*c_5^3*c_1*c_4+4*c_0^3*c_5^3*c_3*c_2+2*c_0^3*c_5^4*a*c_1+2*c_0^4*c_5^3*b*c_4+4*c_3^3*c_0*c_2^3*c_5+2*c_3^3*c_2^4*c_4*a-2*c_3^3*c_2^2*c_1^2*c_5-2*c_3^2*c_2^3*c_0*c_4^2-2*c_0^3*c_5^3*a*c_2*c_4+8*c_0^3*c_5^3*a*c_3*c_2-12*c_0^2*c_5^2*a*c_3^2*c_2^2-2*c_0^3*c_5^3*b*c_3*c_1-12*c_0^2*c_5^2*b*c_3^2*c_2^2+8*c_0^3*c_5^3*b*c_3*c_2-2*c_0^3*c_5^2*c_2*c_4^2*b+4*c_3^2*c_0*c_2*c_5^2*c_1^2+4*c_3*c_0^2*c_2^2*c_5*c_4^2+8*c_3^3*c_0*c_2^3*c_5*a+8*c_3^3*c_0*c_2^3*c_5*b+2*c_0^3*c_5^3*c_1*b*c_4-2*c_0^2*c_5^3*c_1^2*b*c_3+2*c_3^3*c_2^3*c_4*b*c_1-2*c_3^2*c_2^3*c_4^2*b*c_0-2*c_3^3*c_2^3*a*c_1*c_5-2*c_3^3*c_2^3*b*c_0*c_4-2*c_3^3*c_1^2*c_5*c_2^2*b+4*c_0^2*c_4^2*c_5*a*c_3*c_2^2+4*c_0*c_3^2*c_1^2*c_5^2*a*c_2-2*c_0^2*c_5^2*c_1*c_4*c_3*c_2+6*c_0^2*c_5^2*a*c_3*c_2^2*c_4-6*c_0^2*c_5^3*a*c_3*c_1*c_2+6*c_0^2*c_5^2*b*c_1*c_2*c_3^2-6*c_0^3*c_5^2*b*c_4*c_3*c_2-6*c_0*c_5*c_2^3*c_4*a*c_3^2+4*c_0^2*c_5*c_2^2*c_4^2*b*c_3-2*c_3^2*c_0*c_2^2*c_5*c_1*c_4+6*c_3^2*c_0*c_2^2*c_5^2*a*c_1-6*c_3^3*c_0*c_2^2*c_5*b*c_1+6*c_3^2*c_0^2*c_2^2*c_5*b*c_4+4*c_0*c_5^2*c_1^2*b*c_2*c_3^2+2*c_3^3*c_2^3*c_1*c_4+2*c_3^4*c_2^3*b*c_1-2*c_1^2*c_3*c_5^2*a*c_0*c_2*c_4-2*c_1^2*c_3^2*c_5*b*c_0*c_4*c_2-2*c_2^2*c_0*c_4^2*a*c_3*c_1*c_5-2*c_2*c_0^2*c_4^2*b*c_3*c_1*c_5-2*c_0^2*c_5^2*c_2*c_4*b*c_3*c_1-2*c_0*c_5*c_2^2*c_4*b*c_1*c_3^2-2*c_0^2*c_4*c_5^2*a*c_3*c_1*c_2-2*c_0*c_3^2*c_1*c_5*a*c_2^2*c_4-2*c_0^4*c_5^4*a-2*c_0^4*c_5^4*b-2*c_3^4*c_2^4*a-2*c_3^4*c_2^4*b-c_0^4*c_5^4-c_3^4*c_2^4-2*c_0^3*c_4^2*c_5^2*a*c_2+2*c_0^3*c_4*c_5^3*a*c_1-2*c_0^2*c_3*c_1^2*c_5^3*a+2*c_1*c_2^3*c_3^3*a*c_4-2*c_1^2*c_2^2*c_3^3*a*c_5-2*c_0*c_4^2*c_3^2*c_2^3*a-c_1^2*c_0^2*c_4^2*c_5^2-c_1^2*c_4^2*c_3^2*c_2^2+2*a^2*c_0^3*c_5^4*c_1-2*a*c_0^4*c_5^4*b-a^2*c_0^2*c_5^4*c_1^2-a^2*c_3^2*c_2^4*c_4^2+2*a^2*c_3^3*c_2^4*c_4-2*a*c_3^4*c_2^4*b-b^2*c_0^4*c_4^2*c_5^2+2*b^2*c_0^4*c_4*c_5^3+2*b^2*c_3^4*c_2^3*c_1-b^2*c_1^2*c_2^2*c_3^4-b^2*c_0^2*c_4^2*c_3^2*c_2^2+2*c_1^3*c_3*c_5^2*c_0*c_4+2*c_1^3*c_3^2*c_5*c_4*c_2+2*c_1^3*c_3*c_5^3*a*c_0-2*c_1^3*c_3^2*c_5^2*a*c_2-2*c_1^3*c_3^2*c_5^2*b*c_0+2*c_1^3*c_3^3*c_5*b*c_2+2*c_2*c_0^2*c_4^3*c_1*c_5+2*c_2^2*c_0*c_4^3*c_1*c_3-2*c_2^2*c_0^2*c_4^3*a*c_5+2*c_2^3*c_0*c_4^3*a*c_3+2*c_2*c_0^3*c_4^3*b*c_5-2*c_2^2*c_0^2*c_4^3*b*c_3-2*c_1^2*c_0^2*c_4*c_5^3*a-2*c_1*c_0^3*c_4^2*c_5^2*b-2*c_1*c_4^2*c_3^2*c_2^3*a-2*c_1^2*c_4*c_3^3*c_2^2*b-2*a^2*c_0^3*c_5^3*c_2*c_4+4*a^2*c_0^3*c_5^3*c_3*c_2-6*a^2*c_0^2*c_5^2*c_3^2*c_2^2+2*a*c_0^4*c_5^3*b*c_4-a^2*c_0^2*c_5^2*c_2^2*c_4^2+4*a^2*c_3^3*c_0*c_2^3*c_5+2*a*c_0^3*c_5^4*c_1*b+2*a*c_3^3*c_2^4*c_4*b-2*a^2*c_3^3*c_2^3*c_1*c_5+2*a*c_3^4*c_2^3*b*c_1-a^2*c_3^2*c_1^2*c_5^2*c_2^2-b^2*c_0^2*c_3^2*c_1^2*c_5^2-2*b^2*c_0^3*c_3*c_1*c_5^3-6*b^2*c_3^2*c_2^2*c_0^2*c_5^2+4*b^2*c_3^3*c_2^3*c_0*c_5-2*b^2*c_3^3*c_2^3*c_0*c_4+4*b^2*c_0^3*c_5^3*c_3*c_2-4*c_1^2*c_3*c_5*c_2*c_0*c_4^2+4*c_1^2*c_3^2*c_5*a*c_2^2*c_4+4*c_1^2*c_3*c_5^2*b*c_0^2*c_4+4*c_2*c_0^2*c_4^2*a*c_5^2*c_1+4*c_2^2*c_0*c_4^2*b*c_1*c_3^2+6*a^2*c_0^2*c_5^2*c_3*c_2^2*c_4-6*a^2*c_0^2*c_5^3*c_3*c_1*c_2-2*a*c_0^3*c_5^3*b*c_3*c_1-12*a*c_0^2*c_5^2*b*c_3^2*c_2^2+8*a*c_0^3*c_5^3*b*c_3*c_2+2*a^2*c_0^2*c_5^3*c_2*c_4*c_1+2*a^2*c_0*c_5*c_2^3*c_4^2*c_3-6*a^2*c_0*c_5*c_2^3*c_4*c_3^2+2*a*c_0^3*c_5^2*c_2*c_4^2*b-2*a*c_0^3*c_5^3*c_2*c_4*b+6*a^2*c_3^2*c_0*c_2^2*c_5^2*c_1+8*a*c_3^3*c_0*c_2^3*c_5*b+2*a^2*c_0*c_5^3*c_1^2*c_3*c_2-2*a*c_0^3*c_5^3*c_1*b*c_4+2*a*c_0^2*c_5^3*c_1^2*b*c_3+2*a^2*c_3^2*c_2^3*c_4*c_1*c_5-2*a*c_3^3*c_2^3*c_4*b*c_1+2*a*c_3^2*c_2^3*c_4^2*b*c_0-c_1^4*c_3^2*c_5^2-c_2^2*c_0^2*c_4^4-a^2*c_0^4*c_5^4-a^2*c_3^4*c_2^4-b^2*c_3^4*c_2^4-b^2*c_0^4*c_5^4+6*a*c_0^2*c_5^2*b*c_1*c_2*c_3^2-6*a*c_0^3*c_5^2*b*c_4*c_3*c_2-4*a^2*c_0*c_5^2*c_2^2*c_4*c_3*c_1-6*a*c_0*c_5*c_2^3*c_4*b*c_3^2+6*a*c_0^2*c_5^2*c_2^2*c_4*b*c_3-4*a*c_0^2*c_5*c_2^2*c_4^2*b*c_3-6*a*c_3^3*c_0*c_2^2*c_5*b*c_1+6*a*c_3^2*c_0^2*c_2^2*c_5*b*c_4+6*a*c_0*c_5^2*c_1*b*c_3^2*c_2^2-4*a*c_0*c_5^2*c_1^2*b*c_2*c_3^2-6*a*c_0^2*c_5^3*c_1*b*c_3*c_2-4*b^2*c_0^2*c_4*c_5*c_1*c_2*c_3^2+2*a*c_0^2*c_5^2*c_2*c_4*b*c_3*c_1+2*a*c_0*c_5*c_2^2*c_4*b*c_1*c_3^2-2*a*c_3^3*c_2^3*b*c_0*c_4-2*a*c_3^3*c_1*c_5*c_2^3*b+2*a*c_3^3*c_1^2*c_5*c_2^2*b+2*b^2*c_0^3*c_4*c_5^2*c_3*c_1+6*b^2*c_0^2*c_4*c_5*c_3^2*c_2^2-6*b^2*c_0^3*c_4*c_5^2*c_3*c_2+2*b^2*c_0^3*c_4^2*c_5*c_3*c_2-6*b^2*c_0*c_3^3*c_1*c_5*c_2^2+2*b^2*c_0*c_3^3*c_1^2*c_5*c_2+6*b^2*c_0^2*c_3^2*c_1*c_5^2*c_2+2*b^2*c_1*c_2^2*c_3^3*c_0*c_4)-c_3^5*c_2^5+c_2^5*c_4*c_3^4+c_3^5*c_2^4*c_1-c_0^5*c_4*c_5^4-c_3^4*c_2^3*c_1^2*c_4+c_2^3*c_4^2*c_3^3*c_1^2-c_2^4*c_4^2*c_3^3*c_1+c_0^5*c_5^5+3*c_0^2*c_5^2*c_1*c_4^2*c_3*c_2^2-3*c_0^2*c_5^2*c_1^2*c_3*c_2*c_4^2+3*c_0^2*c_5^2*c_1^2*c_2*c_3^2*c_4-3*c_0^2*c_5*c_1*c_4^2*c_3^2*c_2^2-3*c_0*c_5^2*c_3^2*c_1^2*c_2^2*c_4+3*c_0*c_3^2*c_2^2*c_4^2*c_1^2*c_5-c_0^3*c_5^3*c_1^2*c_4^2+c_0^3*c_5^2*c_2^2*c_4^3-c_0^3*c_5*c_2^2*c_4^4-c_0^2*c_3*c_1^3*c_5^4+c_0^2*c_5^3*c_3^2*c_1^3-10*c_0^2*c_5^2*c_3^3*c_2^3-c_0^2*c_3^2*c_2^3*c_4^3+c_0^2*c_2^3*c_4^4*c_3-c_0*c_1^4*c_3^2*c_5^3+5*c_0*c_5*c_3^4*c_2^4+c_0*c_3^2*c_2^4*c_4^3-c_0*c_3^4*c_2^4*c_4+c_5^2*c_1^4*c_3^3*c_2-c_5^2*c_3^3*c_1^3*c_2^2-c_5*c_1*c_3^4*c_2^4+c_5*c_1^3*c_2^2*c_3^4-5*c_0^4*c_5^4*c_2*c_3+c_0^4*c_5^4*c_3*c_1+c_0^4*c_5^4*c_2*c_4+c_0^4*c_5^3*c_1*c_4^2-c_0^4*c_2*c_4^3*c_5^2+c_0^3*c_5^4*c_1^2*c_4+10*c_0^3*c_5^3*c_3^2*c_2^2-c_0^4*c_1*c_5^5+2*c_5*c_3^3*c_2^3*c_1^2*c_4-2*c_5*c_1^3*c_2^2*c_3^3*c_4+4*c_0^4*c_5^3*c_3*c_2*c_4+4*c_0^3*c_5^4*c_1*c_3*c_2-4*c_0^3*c_5^3*c_3*c_2^2*c_4-4*c_0^3*c_5^3*c_1*c_2*c_3^2-2*c_0^3*c_5^3*c_3*c_1^2*c_4-2*c_0^3*c_5^3*c_1*c_4^2*c_2+2*c_0^3*c_5^2*c_1*c_2*c_4^3-6*c_0^3*c_5^2*c_4*c_3^2*c_2^2+2*c_0^3*c_5*c_3*c_2^2*c_4^3-6*c_0^2*c_5^3*c_1*c_3^2*c_2^2+2*c_0^2*c_5^3*c_1^3*c_3*c_4+6*c_0^2*c_5^2*c_2^3*c_4*c_3^2+6*c_0^2*c_5^2*c_3^3*c_2^2*c_1-2*c_0^2*c_5*c_2^3*c_4^3*c_3+4*c_0^2*c_5*c_3^3*c_2^3*c_4+2*c_0*c_5^3*c_3^2*c_1^3*c_2+4*c_0*c_5^2*c_1*c_3^3*c_2^3-2*c_0*c_3^3*c_1^3*c_5^2*c_2-4*c_0*c_5*c_3^3*c_2^4*c_4-4*c_0*c_3^4*c_1*c_5*c_2^3-2*c_0*c_3^2*c_2^3*c_4^3*c_1+2*c_0*c_3^3*c_2^3*c_1*c_4^2

        # Definition of the invariant functions e_{ij}
        e10 = u_4+u_5+u_6
        e20 = u_4*u_5+u_5*u_6+u_6*u_4
        e30 = u_4*u_5*u_6
        e01 = v_4+v_5+v_6
        e11 = u_4*(v_5+v_6)+u_5*(v_6+v_4)+u_6*(v_4+v_5)
        e12 = u_4*(v_5*v_6)+u_5*(v_6*v_4)+u_6*(v_4*v_5)
        e02 = v_4*v_5+v_5*v_6+v_6*v_4
        e21 = v_4*(u_5*u_6)+v_5*(u_6*u_4)+v_6*(u_4*u_5)
        e03 = v_4*v_5*v_6

        # Formulas for these invariant functions in terms of c_i
        Form = [0 for i in range(9)]


# ##### The Test #####

# Define multivariate polynomial ring with rational coefficients
R = QQ['w_0,w_1,w_2,c_0,c_1,c_2,c_3,c_4,c_5,a,b']
(w_0, w_1, w_2, c_0, c_1, c_2, c_3, c_4, c_5, a, b) = R.gens()




# Main function

if __name__ == '__main__':
    Input = sage_eval(sys.argv[1])
    td_format = sage_eval(sys.argv[2])
    sample = Sample(Input, td_format)
    print sample
